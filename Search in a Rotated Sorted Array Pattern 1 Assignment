1. Given an sorted array of integers and a key element, you need to print the index where the element is
present. If the target element is not present in the array, print -1.
input = N=10, target= 5
        Array = 1 3 3 4 5 8 9 11 15 15
output = Index found at 4

import java.util.*;
public class Main 
{
   public static void main(String[] args) 
   {
       Scanner sc = new Scanner(System.in);
       int n = sc.nextInt(), target = sc.nextInt();
        int a[] = new int[n];
       for (int i = 0; i < n; i++) 
       {
           a[i] = sc.nextInt();
       }
       int low = 0, high = n - 1;
       while (low <= high) 
       {
           int mid = low + (high - low) / 2;
           if (a[mid] == target) 
           {
               System.out.println("Index found at " + mid);
               return;
           }
           if (a[mid] > target)
               high = mid - 1;
           else
               low = mid + 1;
       }
      System.out.println("-1");
   }
}

==============================================================================================================================================
2. You are given a sorted array containing N integers and a number target. Implement the upper bound
function that returns the index of an element just greater than the target element. If there exists no such
element then return -1.
Note: The target may not be present in the array.
N=10, target= 3
Array = 1 3 3 4 5 8 9 11 15 15
3

import java.util.*;
public class Main {
   public static void main(String[] args) {
       Scanner sc = new Scanner(System.in);
       int n = sc.nextInt(), target = sc.nextInt();
       int a[] = new int[n];
       for (int i = 0; i < n; i++) {
           a[i] = sc.nextInt();
       }
       int low = 0, high = n - 1, ans = n;
       while (low <= high) {
           int mid = low + (high - low) / 2;
           if (a[mid] > target) {
               ans = Math.min(ans, mid);
               high = mid - 1;
           } else {
               low = mid + 1;
           }
       }
      System.out.println(ans);
   }
}
===============================================================================================================================================
3. You are given a sorted array containing N integers and a number target. Implement the lower bound
function that returns the index of the first element that is greater than or equal to the ‘target’ value. If there
exists no such element then return -1.
Note: The target may not be present in the array.
N=10, target= 3
Array = 1 3 3 4 5 8 9 11 15 15
1

import java.util.*;
public class Main {
   public static void main(String[] args) {
       Scanner sc = new Scanner(System.in);
       int n = sc.nextInt(), target = sc.nextInt();
       int a[] = new int[n];
       for (int i = 0; i < n; i++) {
           a[i] = sc.nextInt();
       }
       int low = 0, high = n - 1, ans = n;
       while (low <= high) {
           int mid = (low + high) / 2;
           if (a[mid] >= target) {
               ans = Math.min(ans, mid);
               high = mid - 1;
           } else {
               low = mid + 1;
           }
       }
       System.out.println(ans);
   }
}
==============================================================================================================================================
4. You are given a sorted array containing N integers and a number target, you have to find the number of
occurrences of the target in the given array.
N=10, target= 5
Array = 1 3 3 4 5 5 5 11 15 15
3 [number of occurrences of element with value 5 will be 3.]
import java.util.*;
 public class Main {
   public static void main(String[] args) {
       Scanner sc = new Scanner(System.in);
       int n = sc.nextInt(), target = sc.nextInt();
        int a[] = new int[n];
       for (int i = 0; i < n; i++) {
           a[i] = sc.nextInt();
       }
       int low = 0, high = n - 1, first = -1, last = -1;
        while (low <= high) {
           int mid = (low + high) / 2;
           if (a[mid] == target) {
               first = mid;
               high = mid - 1;
           } else if (a[mid] > target) {
               high = mid - 1;
           } else low = mid + 1;
       }
       low = 0;
       high = n - 1;
       while (low <= high) {
           int mid = (low + high) / 2;
           if (a[mid] == target) {
               last = mid;
               low = mid + 1;
           } else if (a[mid] > target) {
               high = mid - 1;
           } else low = mid + 1;
       }
       if (first == -1) {
           System.out.println("target element not found");
           return;
       }
       System.out.println(last - first + 1);
   }
}
=============================================================================================================================================
5. Given a sorted array of distinct integers that is rotated in nature, find the value of the maximum element in
the array.
N = 10
Array = 6 7 11 13 15 1 2 3 4 5
Maximum element found at index 4
Value of that element found 15

import java.util.*;
public class Main {
   public static void main(String[] args) {
       Scanner sc = new Scanner(System.in);
       int n = sc.nextInt();
       int a[] = new int[n];
       for (int i = 0; i < n; i++) {
           a[i] = sc.nextInt();
       }
       int low = 0, high = n - 1, pivot = -1;
       while (low <= high) {
           int mid = (low + high) / 2;
           if (a[mid] > a[n - 1]) {
               pivot = Math.max(pivot, mid);
               low = mid + 1;
           } else {
               high = mid - 1;
           }
       }
       System.out.println("Maximum element found at index " + pivot);
       System.out.println("Value of that element found " + a[pivot]);
   }
}
