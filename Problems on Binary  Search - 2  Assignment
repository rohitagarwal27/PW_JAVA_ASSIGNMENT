Q1. Given a non-negative integer c, decide whether there are two integers a and b such that a2 + b2 = c.

Example 1
Input
5
Output
YES
Explanation
22 + 12 = 5

Example 2
Input
10
Output
NO

import java.util.*;
public class Main 
{
   public static boolean binary_search(int low, int high, int n) {
       if (low > high)
           return false;
       int mid = low + (high - low) / 2;
       if (mid * mid == n)
           return true;
       if (mid * mid > n)
           return binary_search(low, mid - 1, n);
       return binary_search(mid + 1, high, n);
   }
   public static boolean judgeSquareSum(int c) {
       for (int a = 0; a * a <= c; a++) {
           int b = c - (int) (a * a);
           if (binary_search(0, b, b))
               return true;
       }
       return false;
   }
   public static void main(String[] args) {
       Scanner sc = new Scanner(System.in);
       int c = sc.nextInt();
       System.out.print((judgeSquareSum(c) ? "YES\n" : "NO\n"));
   }
}

==============================================================================================================================================
Q2. Given a sorted integer array arr, two integers k and x, return the k closest integers to x in the array. The
result should also be sorted in ascending order.


Example 1
Input :
n = 5
arr = [1, 2, 3, 4, 5]
k = 4
x = 3
Output : 1 2 3 4

Example 2
Input :
n = 5
arr = [1, 2, 3, 4, 5]
k = 3
x = 2
Output : 1 2 3

import java.util.*;
public class Main {
   public static int lowerBound(int[] a, int target) {
       int low = 0, high = a.length - 1, ans = a.length;
       while (low <= high) {
           int mid = (low + high) / 2;
           if (a[mid] >= target) {
               ans = Math.min(ans, mid);
               high = mid - 1;
           } else {
               low = mid + 1;
           }
       }
       return ans;
   }
   public static ArrayList<Integer> findClosestElements(int[] a, int k, int x) {
       int r = lowerBound(a, x);
       int l = r - 1;
       ArrayList<Integer> ans = new ArrayList<>();
       while (ans.size() != k) {
           if ((r == (int) a.length) || (l >= 0 && Math.abs(a[l] - x) <= Math.abs(a[r] - x))) {
               ans.add(a[l--]);
           } else ans.add(a[r++]);
       }
       Collections.sort(ans);
       return ans;
   }
   public static void main(String[] args) {
       Scanner sc = new Scanner(System.in);
       int n = sc.nextInt();
       int a[] = new int[n];
       for (int i = 0; i < n; i++) {
           a[i] = sc.nextInt();
       }
       int k = sc.nextInt();
       int x = sc.nextInt();
       ArrayList<Integer> ans = findClosestElements(a, k, x);
       for (int i = 0; i < k; i++) {
           System.out.print(ans.get(i) + " ");
       }
   }
}
==============================================================================================================================================
Q3. You are given a sorted array consisting of only integers where every element appears exactly twice,
except for one element which appears exactly once.
Return the single element that appears only once.

Example 1
Input
n = 9
Array = [1, 1, 2, 2, 4, 4, 5, 8, 8]
Output=5

Example 2
Input
n = 3
Array = [1, 2, 2]
Output
1
 
     
import java.util.*;
public class Main {
   public static int singleNonDuplicate(ArrayList<Integer> a) {
       if (a.size() == 1) return a.get(0);
       int low = 0, high = a.size() - 1, mid, val;
       while (low < high) {
           mid = low + (high - low) / 2;
           val = (mid % 2 == 0) ? mid + 1 : mid - 1;
           if (a.get(mid) == a.get(val)) low = mid + 1;
           else high = mid;
       }
       return a.get(low);
   }
   public static void main(String[] args) {
       Scanner sc = new Scanner(System.in);
       int n = sc.nextInt();
       ArrayList<Integer> a = new ArrayList<>();
       for (int i = 0; i < n; i++) {
           a.add(sc.nextInt());
       }
       System.out.print(singleNonDuplicate(a));
   }
}
==============================================================================================================================================
