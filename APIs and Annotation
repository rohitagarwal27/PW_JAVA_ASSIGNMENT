1. program to display current date and time in java.

import java.time.*;
public class DateTime 
{
  public static void main(String[] args) 
    {
     LocalDate date = LocalDate.now();
     System.out.println(date);
     LocalTime time=LocalTime.now();
     System.out.println(time);
    }
}
Output:
javac DateTime.java
java DateTime
2023-03-30
10:33:11.025394800
======================================================================================================================================================================
2. Write a program to convert a date to a string in the format "MM/dd/yyyy".
Ans:
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
public class DateToString 
 {
   public static void main(String[] args) 
   {
   LocalDate date = LocalDate.of(2023, 4, 4);
   DateTimeFormatter formatter = DateTimeFormatter.ofPattern("MM/dd/yyyy");
   String formattedDate = date.format(formatter);
   System.out.println("Formatted Date: " + formattedDate);
   }
}

Output:
javac DateToString.java
java DateToString
Formatted Date: 04/04/2023
======================================================================================================================================================================
3. What is the difference between collections and streams?Explain with an Example
In Java, collections and streams are two different ways of processing and manipulating data.

Collections are data structures that store a collection of elements, such as lists, sets, or maps. They provide methods to add, remove, and manipulate the elements in the collection, and they can be traversed using iterators.

Streams, on the other hand, are a way of processing data in a functional style. They allow you to express complex data transformations as a pipeline of operations, such as filtering, mapping, and reducing. Streams do not store data themselves; they operate on existing data sources, such as collections, arrays, or I/O channels.

The main difference between collections and streams is that collections are designed for storing and manipulating data in memory, while streams are designed for processing large amounts of data efficiently, without storing it all in memory. Collections are mutable, meaning that you can modify their contents, whereas streams are immutable, meaning that they cannot be modified once created.

Another important difference is that collections are eager, meaning that they evaluate all their elements eagerly when the collection is created, while streams are lazy, meaning that they only evaluate the elements when they are needed for a particular operation.
Ex: Collections
import java.io.*;
import java.util.*;
class Main {
public static void main(String[] args)
{
List<String> CompanyList = new ArrayList<>();
CompanyList.add("Google");
CompanyList.add("Apple");
CompanyList.add("Microsoft");
Comparator<String> com = (String o1, String o2) -> o1.compareTo(o2);
Collections.sort(CompanyList, com);
for (String name : CompanyList) {
System.out.println(name);
}
}
}

Output:
Apple
Google
Microsoft

Ex: Streams
import java.io.*;
import java.util.*;
class Demo {
public static void main(String[] args)
{
List<String> CompanyList = new ArrayList<>();
CompanyList.add("Google");
CompanyList.add("Apple");
CompanyList.add("Microsoft");
CompanyList.stream().sorted().forEach(
System.out::println);
}
}
Output:
Apple
Google
Microsoft
=======================================================================================================================================================================
4. What is enums in java? explain with an example
Ans: We can use enum to define a group of named constants.
Enums are used to represent a collection of related constants that have a common purpose. Each constant in an
enum is an instance of the enum type, and they are typically defined as public static final fields.
Here's an example of how to define an enum in Java:
class EnumDemo{
public enum DayOfWeek {
MONDAY,
TUESDAY,
WEDNESDAY,
THURSDAY,
FRIDAY,
SATURDAY,
SUNDAY
}
public static void main(String args[]){
for(DayOfWeek d:DayOfWeek.values())
System.out.println(d);
}
}
Here we define an enum called "DayOfWeek" that represents the days of the week. The enum has seven
constants, each representing a day of the week. The constants are defined in all uppercase letters by convention.

=======================================================================================================================================================================
5. What are in built annotations in java
Ans: built-in annotations in Java:
@Override
@Deprecated
@SuppressWarnings
@FunctionalInterface
@Retention
@Target
@Documented
@Inherited
These built-in annotations in Java are used to provide additional information to the Java compiler and other
tools. They help improve code readability, maintainability, and safety by enforcing specific rules and behaviours
in Java code.


